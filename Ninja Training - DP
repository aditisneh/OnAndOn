int solve(int day,int last,vector<vector<int>> &points,vector<vector<int>>&dp){
    if(day==0){
        int maxi=0;
        for(int i=0;i<3;i++){
            if(i!=last){
                maxi=max(maxi,points[0][i]);
            }
        }
         return maxi;
    }
    if(dp[day][last]!=-1) return dp[day][last];
    int maxi=0;
    for(int i=0;i<3;i++){
        if(i!=last){
            int point=points[day][i]+solve(day-1,i,points,dp);
            maxi=max(maxi,point);
        }
    }
    return dp[day][last]=maxi; k
}
int ninjaTraining(int n, vector<vector<int>> &points)
{   //Memoization --> vector<vector<int>>dp(n,vector<int> (4,-1));
    // return solve(n-1,3,points,dp);
    // Tabulation --> vector<vector<int>>dp(n,vector<int> (4,0));
  //Space Optimiztion
   vector<int>prev(4,0);
   prev[0]=max(points[0][1],points[0][2]);
   prev[1]=max(points[0][0],points[0][2]);
   prev[2]=max(points[0][0],points[0][1]);
   prev[3]=max(points[0][0],max(points[0][1],points[0][2]));
  
   for(int day=1;day<n;day++){
       vector<int>temp(4,0);
       for(int last=0;last<4;last++){
           temp[last]=0;
           for(int task=0;task<3;task++){
               if(task!=last){
               int point=points[day][task]+prev[task];
               temp[last]=max(temp[last],point);
           }
           }
       }
        prev=temp;
   }
   return prev[3];
}
