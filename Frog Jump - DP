//All the three approaches
#include <bits/stdc++.h> 
int solve(int n, vector<int> &heights,vector<int>&ans){
    if(n==0) return 0;
    if(ans[n]!=-1) return ans[n];
    int left=solve(n-1,heights,ans)+abs(heights[n]-heights[n-1]);
    int right=INT_MAX;
    if(n>1) right=solve(n-2,heights,ans)+abs(heights[n]-heights[n-2]);
    return ans[n]=min(left,right);
}
int frogJump(int n, vector<int> &heights)
{
    // vector<int>ans(n+1,-1);
    // return solve(n-1,heights,ans);
    // vector<int>dp(n,0);
    // dp[0]=0;
    // for(int i=1;i<n;i++){
    //     int left=dp[i-1]+abs(heights[i]-heights[i-1]);
    //     int right=INT_MAX;
    //     if(i>1){
    //         right=dp[i-2]+abs(heights[i]-heights[i-2]);
    //     }
    //     dp[i]=min(left,right);
    // }
    // return dp[n-1];
    int prev1=0;
    int prev2=0;
    for(int i=1;i<n;i++){
        int left=prev1+abs(heights[i]-heights[i-1]);
        int right=INT_MAX;
        if(i>1){
            right=prev2+abs(heights[i]-heights[i-2]);
        }
        int curr=min(left,right);
        prev2=prev1;
        prev1=curr;
        
    }
    return prev1;
}
